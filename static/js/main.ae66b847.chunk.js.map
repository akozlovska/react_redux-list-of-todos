{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","api.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","defaultFilter","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","useMemo","filtered","completed","title","toLowerCase","includes","length","className","map","cn","id","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","e","filterActions","target","placeholder","style","pointerEvents","Loader","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","finally","href","email","name","App","fetchedTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAWaA,EALD,SAACC,GAAD,MAA4B,CACtCC,KAAM,kBACNC,QAASF,IAGED,EANE,iBAAqB,CAAEE,KAAM,uBA2B7BE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OCpBAL,EACD,SAACO,GAAD,MAAoC,CAC5CL,KAAM,mBACNC,QAASI,IAHAP,EAKC,iBAAyB,CAAEE,KAAM,uBALlCF,EAMA,SAACQ,GAAD,MAAsC,CAC/CN,KAAM,oBACNC,QAASK,IAIPC,EAAwB,CAAEF,MAAO,GAAIC,OAAQ,OAepCE,EAbO,WAAqD,IAApDC,EAAmD,uDAAlCF,EAAeH,EAAmB,uCACxE,OAAQA,EAAOJ,MACb,IAAK,mBACH,OAAO,2BAAKS,GAAZ,IAAoBJ,MAAOD,EAAOH,UACpC,IAAK,qBACH,OAAO,2BAAKQ,GAAZ,IAAoBJ,MAAO,KAC7B,IAAK,oBACH,OAAO,2BAAKI,GAAZ,IAAoBH,OAAQF,EAAOH,UACrC,QACE,OAAOQ,I,QCxBAX,EACN,SAACY,GAAD,MAA+B,CAClCV,KAAM,YACNC,QAASS,IAcEC,EAVM,WAAoD,IAAnDD,EAAkD,uDAAlC,GAAIN,EAA8B,uCACtE,MACO,cADCA,EAAOJ,KAEJ,YAAII,EAAOH,SAGXS,GCZPE,EAAcC,0BAAgB,CAClCC,YAAaZ,EACbO,OAAQD,EACRE,MAAOC,IAIII,EAAQC,sBACnBJ,EACAK,8BACEC,0BAAgBC,O,0BCNpB,SAASC,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UCf4BC,IDkB1C,ICjBMC,EAAkDC,I,wBCElDC,EAAqB,WAChC,IAAMC,EAAWJ,cACXrB,EAAQsB,GAAe,SAAA7B,GAAK,OAAIA,EAAMO,SACtCI,EAAckB,GAAe,SAAA7B,GAAK,OAAIA,EAAMW,eAClD,EAA0BkB,GAAe,SAAA7B,GAAK,OAAIA,EAAMM,UAAhDJ,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAET8B,EAAgBC,mBAAQ,WAC5B,IAAIC,EAAW5B,EAAMD,QAAO,SAAAV,GAC1B,OAAQO,GACN,IAAK,SACH,OAAQP,EAAKwC,UACf,IAAK,YACH,OAAOxC,EAAKwC,UAEd,QACE,OAAO,MAUb,OANIlC,IACFiC,EAAWA,EAAS7B,QAClB,SAAAV,GAAI,OAAIA,EAAKyC,MAAMC,cAAcC,SAASrC,EAAMoC,mBAI7CH,IACN,CAAC5B,EAAOL,EAAOC,IAElB,OACE,mCACG8B,EAAcO,OACb,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGR,EAAcS,KAAI,SAAA9C,GAAI,OACrB,qBACE,UAAQ,OAER6C,UAAWE,IAAG,CACZ,6BAAwC,OAAXhC,QAAW,IAAXA,OAAA,EAAAA,EAAaiC,MAAOhD,EAAKgD,KAJ1D,UAOE,oBAAIH,UAAU,eAAd,SAA8B7C,EAAKgD,KACnC,oBAAIH,UAAU,eAAd,SACG7C,EAAKwC,WACJ,sBAAMK,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBACEA,UAAWE,IAAG,CACZ,mBAAoB/C,EAAKwC,UACzB,mBAAoBxC,EAAKwC,YAH7B,SAMGxC,EAAKyC,UAGV,oBAAII,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACV5C,KAAK,SACLgD,QAAS,kBAAMb,EAASc,EAAuBlD,KAJjD,SAME,sBAAM6C,UAAU,OAAhB,SACE,mBACEA,UAAWE,IAAG,MAAO,CACnB,UAAqB,OAAXhC,QAAW,IAAXA,OAAA,EAAAA,EAAaiC,MAAOhD,EAAKgD,GACnC,gBAA2B,OAAXjC,QAAW,IAAXA,OAAA,EAAAA,EAAaiC,MAAOhD,EAAKgD,eAlC9ChD,EAAKgD,YA6ClB,mBAAGH,UAAU,0BAAb,oEChGKM,EAAuB,WAClC,IAAMf,EAAWJ,cACjB,EAA0BC,GAAe,SAAA7B,GAAK,OAAIA,EAAMM,UAAhDJ,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAEf,OACE,uBACEsC,UAAU,mBACVO,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGT,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRU,MAAOhD,EACPiD,SAAU,SAACC,GAAD,OAAOrB,EAASsB,EACbD,EAAEE,OAAOJ,SAJxB,UAME,wBAAQA,MAAO,MAAf,iBACA,wBAAQA,MAAO,SAAf,oBACA,wBAAQA,MAAO,YAAf,8BAKN,oBAAGV,UAAU,qDAAb,UACE,uBACE,UAAQ,cACR5C,KAAK,OACL4C,UAAU,QACVe,YAAY,YACZL,MAAOjD,EACPkD,SAAU,SAACC,GAAD,OAAOrB,EAASsB,EAAuBD,EAAEE,OAAOJ,WAE5D,sBAAMV,UAAU,eAAhB,SACE,mBAAGA,UAAU,gCAGZvC,GACD,sBAAMuC,UAAU,gBAAgBgB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACR7D,KAAK,SACL4C,UAAU,SACVI,QAAS,kBAAMb,EAASsB,iBC/CzBK,G,MAAmB,kBAC9B,qBAAKlB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCGNmB,EAAsB,WACjC,IAAM5B,EAAWJ,cACXjB,EAAckB,GAAe,SAAA7B,GAAK,OAAIA,EAAMW,eAClD,EAAkCkD,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwBF,mBAAsB,MAA9C,mBAAOG,EAAP,KAAaC,EAAb,KAUA,OARAC,qBAAU,WLSW,IAACC,EKRhBxD,ILQgBwD,EKPVxD,EAAYwD,OLOiBlD,EAAG,iBAAiBkD,KKNtD3C,KAAKyC,GACLG,SAAQ,kBAAML,GAAa,QAE/B,IAGD,sBAAKtB,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdqB,EACC,cAAC,EAAD,IAEA,sBAAKrB,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIY9B,QAJZ,IAIYA,OAJZ,EAIYA,EAAaiC,MAIzB,wBACE/C,KAAK,SACL4C,UAAU,SACV,UAAQ,cACRI,QAAS,kBAAMb,EAASc,WAI5B,sBAAKL,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBACG9B,QADH,IACGA,OADH,EACGA,EAAa0B,QAGhB,oBAAGI,UAAU,QAAQ,UAAQ,aAA7B,UACE,+BACc,OAAX9B,QAAW,IAAXA,KAAayB,UACZ,wBAAQK,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,uBAIH,OAED,mBAAG4B,KAAI,wBAAYL,QAAZ,IAAYA,OAAZ,EAAYA,EAAMM,OAAzB,gBACGN,QADH,IACGA,OADH,EACGA,EAAMO,oBCnDVC,EAAgB,WAC3B,IAAMxC,EAAWJ,cACXjB,EAAckB,GAAe,SAAA7B,GAAK,OAAIA,EAAMW,eAClD,EAAkCkD,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAQA,OANAG,qBAAU,WNGkBjD,EAAY,UMDnCO,MAAK,SAAAiD,GAAY,OAAIzC,EAAS0C,EAAiBD,OAC/CL,SAAQ,kBAAML,GAAa,QAC7B,IAGD,qCACE,qBAAKtB,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACGqB,EACC,cAAC,EAAD,IAEA,cAAC,EAAD,aAOTnD,GACC,cAAC,EAAD,QCtCFgE,EAAO,kBACX,cAAC,IAAD,CAAU/D,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNgE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.ae66b847.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveAction = { type: 'currentTodo/REMOVE' };\ntype SetAction = { type: 'currentTodo/SET'; payload: Todo };\n\nconst remove = (): RemoveAction => ({ type: 'currentTodo/REMOVE' });\nconst set = (todo: Todo): SetAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { set, remove };\n\ntype State = Todo | null;\ntype Action = SetAction | RemoveAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype Filter = { query: string, status: Status };\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype ClearQueryAction = { type: 'filter/CLEAR_QUERY' };\ntype SetStatusAction = { type: 'filter/SET_STATUS', payload: Status };\ntype Action = SetQueryAction | SetStatusAction | ClearQueryAction;\n\nexport const actions = {\n  setQuery: (query: string): SetQueryAction => ({\n    type: 'filter/SET_QUERY',\n    payload: query,\n  }),\n  clearQuery: (): ClearQueryAction => ({ type: 'filter/CLEAR_QUERY' }),\n  setStatus: (status: Status): SetStatusAction => ({\n    type: 'filter/SET_STATUS',\n    payload: status,\n  }),\n};\n\nconst defaultFilter: Filter = { query: '', status: 'all' };\n\nconst filterReducer = (filter: Filter = defaultFilter, action: Action) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...filter, query: action.payload };\n    case 'filter/CLEAR_QUERY':\n      return { ...filter, query: '' };\n    case 'filter/SET_STATUS':\n      return { ...filter, status: action.payload };\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nexport const actions = {\n  set: (todos: Todo[]): SetAction => ({\n    type: 'todos/SET',\n    payload: todos,\n  }),\n};\n\nconst todosReducer = (todos: Todo[] = [], action: SetAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useMemo } from 'react';\nimport cn from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const filteredTodos = useMemo(() => {\n    let filtered = todos.filter(todo => {\n      switch (status) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        case 'all':\n        default:\n          return true;\n      }\n    });\n\n    if (query) {\n      filtered = filtered.filter(\n        todo => todo.title.toLowerCase().includes(query.toLowerCase()),\n      );\n    }\n\n    return filtered;\n  }, [todos, query, status]);\n\n  return (\n    <>\n      {filteredTodos.length ? (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={cn({\n                  'has-background-info-light': currentTodo?.id === todo.id,\n                })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={cn({\n                      'has-text-success': todo.completed,\n                      'has-text-danger': !todo.completed,\n                    })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(currentTodoActions.set(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={cn('far', {\n                          'fa-eye': currentTodo?.id !== todo.id,\n                          'fa-eye-slash': currentTodo?.id === todo.id,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => dispatch(filterActions\n              .setStatus(e.target.value as Status))}\n          >\n            <option value={'all' as Status}>All</option>\n            <option value={'active' as Status}>Active</option>\n            <option value={'completed' as Status}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => dispatch(filterActions.setQuery(e.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.clearQuery())}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.remove())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <span>\n                {currentTodo?.completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n              </span>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useDispatch } from 'react-redux';\nimport { getTodos } from './api';\nimport { useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getTodos()\n      .then(fetchedTodos => dispatch(todosActions.set(fetchedTodos)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}